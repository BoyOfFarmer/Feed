/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "newsfeed_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




Profile::~Profile() throw() {
}


void Profile::__set_id(const int32_t val) {
  this->id = val;
}

void Profile::__set_name(const std::string& val) {
  this->name = val;
}

void Profile::__set_gender(const int8_t val) {
  this->gender = val;
}

void Profile::__set_birthday(const int32_t val) {
  this->birthday = val;
}

uint32_t Profile::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->gender);
          this->__isset.gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->birthday);
          this->__isset.birthday = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Profile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Profile");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gender", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->gender);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("birthday", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->birthday);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Profile &a, Profile &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.gender, b.gender);
  swap(a.birthday, b.birthday);
  swap(a.__isset, b.__isset);
}

Profile::Profile(const Profile& other0) {
  id = other0.id;
  name = other0.name;
  gender = other0.gender;
  birthday = other0.birthday;
  __isset = other0.__isset;
}
Profile& Profile::operator=(const Profile& other1) {
  id = other1.id;
  name = other1.name;
  gender = other1.gender;
  birthday = other1.birthday;
  __isset = other1.__isset;
  return *this;
}
void Profile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Profile(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "gender=" << to_string(gender);
  out << ", " << "birthday=" << to_string(birthday);
  out << ")";
}


ProfileCreateResult::~ProfileCreateResult() throw() {
}


void ProfileCreateResult::__set_exitCode(const int32_t val) {
  this->exitCode = val;
}

void ProfileCreateResult::__set_message(const std::string& val) {
  this->message = val;
}

void ProfileCreateResult::__set_result(const int32_t val) {
  this->result = val;
}

uint32_t ProfileCreateResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exitCode);
          this->__isset.exitCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProfileCreateResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProfileCreateResult");

  xfer += oprot->writeFieldBegin("exitCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->exitCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProfileCreateResult &a, ProfileCreateResult &b) {
  using ::std::swap;
  swap(a.exitCode, b.exitCode);
  swap(a.message, b.message);
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

ProfileCreateResult::ProfileCreateResult(const ProfileCreateResult& other2) {
  exitCode = other2.exitCode;
  message = other2.message;
  result = other2.result;
  __isset = other2.__isset;
}
ProfileCreateResult& ProfileCreateResult::operator=(const ProfileCreateResult& other3) {
  exitCode = other3.exitCode;
  message = other3.message;
  result = other3.result;
  __isset = other3.__isset;
  return *this;
}
void ProfileCreateResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProfileCreateResult(";
  out << "exitCode=" << to_string(exitCode);
  out << ", " << "message=" << to_string(message);
  out << ", " << "result=" << to_string(result);
  out << ")";
}


ProfileResult::~ProfileResult() throw() {
}


void ProfileResult::__set_exitCode(const int32_t val) {
  this->exitCode = val;
}

void ProfileResult::__set_message(const std::string& val) {
  this->message = val;
}

void ProfileResult::__set_result(const Profile& val) {
  this->result = val;
}

uint32_t ProfileResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exitCode);
          this->__isset.exitCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result.read(iprot);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProfileResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProfileResult");

  xfer += oprot->writeFieldBegin("exitCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->exitCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->result.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProfileResult &a, ProfileResult &b) {
  using ::std::swap;
  swap(a.exitCode, b.exitCode);
  swap(a.message, b.message);
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

ProfileResult::ProfileResult(const ProfileResult& other4) {
  exitCode = other4.exitCode;
  message = other4.message;
  result = other4.result;
  __isset = other4.__isset;
}
ProfileResult& ProfileResult::operator=(const ProfileResult& other5) {
  exitCode = other5.exitCode;
  message = other5.message;
  result = other5.result;
  __isset = other5.__isset;
  return *this;
}
void ProfileResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProfileResult(";
  out << "exitCode=" << to_string(exitCode);
  out << ", " << "message=" << to_string(message);
  out << ", " << "result=" << to_string(result);
  out << ")";
}


PostList::~PostList() throw() {
}


void PostList::__set_id(const int32_t val) {
  this->id = val;
}

void PostList::__set_count(const int32_t val) {
  this->count = val;
}

void PostList::__set_listFeed(const std::vector<int32_t> & val) {
  this->listFeed = val;
}

uint32_t PostList::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->listFeed.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->listFeed.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readI32(this->listFeed[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.listFeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PostList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PostList");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("listFeed", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->listFeed.size()));
    std::vector<int32_t> ::const_iterator _iter11;
    for (_iter11 = this->listFeed.begin(); _iter11 != this->listFeed.end(); ++_iter11)
    {
      xfer += oprot->writeI32((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PostList &a, PostList &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.count, b.count);
  swap(a.listFeed, b.listFeed);
  swap(a.__isset, b.__isset);
}

PostList::PostList(const PostList& other12) {
  id = other12.id;
  count = other12.count;
  listFeed = other12.listFeed;
  __isset = other12.__isset;
}
PostList& PostList::operator=(const PostList& other13) {
  id = other13.id;
  count = other13.count;
  listFeed = other13.listFeed;
  __isset = other13.__isset;
  return *this;
}
void PostList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PostList(";
  out << "id=" << to_string(id);
  out << ", " << "count=" << to_string(count);
  out << ", " << "listFeed=" << to_string(listFeed);
  out << ")";
}


NewsFeed::~NewsFeed() throw() {
}


void NewsFeed::__set_id(const int32_t val) {
  this->id = val;
}

void NewsFeed::__set_owner(const int32_t val) {
  this->owner = val;
}

void NewsFeed::__set_content(const std::string& val) {
  this->content = val;
}

void NewsFeed::__set_edit_time(const int32_t val) {
  this->edit_time = val;
}

void NewsFeed::__set_status(const int8_t val) {
  this->status = val;
}

uint32_t NewsFeed::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->owner);
          this->__isset.owner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->edit_time);
          this->__isset.edit_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NewsFeed::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NewsFeed");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->owner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("edit_time", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->edit_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NewsFeed &a, NewsFeed &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.owner, b.owner);
  swap(a.content, b.content);
  swap(a.edit_time, b.edit_time);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

NewsFeed::NewsFeed(const NewsFeed& other14) {
  id = other14.id;
  owner = other14.owner;
  content = other14.content;
  edit_time = other14.edit_time;
  status = other14.status;
  __isset = other14.__isset;
}
NewsFeed& NewsFeed::operator=(const NewsFeed& other15) {
  id = other15.id;
  owner = other15.owner;
  content = other15.content;
  edit_time = other15.edit_time;
  status = other15.status;
  __isset = other15.__isset;
  return *this;
}
void NewsFeed::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NewsFeed(";
  out << "id=" << to_string(id);
  out << ", " << "owner=" << to_string(owner);
  out << ", " << "content=" << to_string(content);
  out << ", " << "edit_time=" << to_string(edit_time);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


FeedCreateResult::~FeedCreateResult() throw() {
}


void FeedCreateResult::__set_exitCode(const int32_t val) {
  this->exitCode = val;
}

void FeedCreateResult::__set_message(const std::string& val) {
  this->message = val;
}

void FeedCreateResult::__set_result(const int32_t val) {
  this->result = val;
}

uint32_t FeedCreateResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exitCode);
          this->__isset.exitCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FeedCreateResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FeedCreateResult");

  xfer += oprot->writeFieldBegin("exitCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->exitCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FeedCreateResult &a, FeedCreateResult &b) {
  using ::std::swap;
  swap(a.exitCode, b.exitCode);
  swap(a.message, b.message);
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

FeedCreateResult::FeedCreateResult(const FeedCreateResult& other16) {
  exitCode = other16.exitCode;
  message = other16.message;
  result = other16.result;
  __isset = other16.__isset;
}
FeedCreateResult& FeedCreateResult::operator=(const FeedCreateResult& other17) {
  exitCode = other17.exitCode;
  message = other17.message;
  result = other17.result;
  __isset = other17.__isset;
  return *this;
}
void FeedCreateResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FeedCreateResult(";
  out << "exitCode=" << to_string(exitCode);
  out << ", " << "message=" << to_string(message);
  out << ", " << "result=" << to_string(result);
  out << ")";
}


FeedUpdateResult::~FeedUpdateResult() throw() {
}


void FeedUpdateResult::__set_exitCode(const int32_t val) {
  this->exitCode = val;
}

void FeedUpdateResult::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t FeedUpdateResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exitCode);
          this->__isset.exitCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FeedUpdateResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FeedUpdateResult");

  xfer += oprot->writeFieldBegin("exitCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->exitCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FeedUpdateResult &a, FeedUpdateResult &b) {
  using ::std::swap;
  swap(a.exitCode, b.exitCode);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

FeedUpdateResult::FeedUpdateResult(const FeedUpdateResult& other18) {
  exitCode = other18.exitCode;
  message = other18.message;
  __isset = other18.__isset;
}
FeedUpdateResult& FeedUpdateResult::operator=(const FeedUpdateResult& other19) {
  exitCode = other19.exitCode;
  message = other19.message;
  __isset = other19.__isset;
  return *this;
}
void FeedUpdateResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FeedUpdateResult(";
  out << "exitCode=" << to_string(exitCode);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


FeedDeleteResult::~FeedDeleteResult() throw() {
}


void FeedDeleteResult::__set_exitCode(const int32_t val) {
  this->exitCode = val;
}

void FeedDeleteResult::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t FeedDeleteResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exitCode);
          this->__isset.exitCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FeedDeleteResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FeedDeleteResult");

  xfer += oprot->writeFieldBegin("exitCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->exitCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FeedDeleteResult &a, FeedDeleteResult &b) {
  using ::std::swap;
  swap(a.exitCode, b.exitCode);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

FeedDeleteResult::FeedDeleteResult(const FeedDeleteResult& other20) {
  exitCode = other20.exitCode;
  message = other20.message;
  __isset = other20.__isset;
}
FeedDeleteResult& FeedDeleteResult::operator=(const FeedDeleteResult& other21) {
  exitCode = other21.exitCode;
  message = other21.message;
  __isset = other21.__isset;
  return *this;
}
void FeedDeleteResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FeedDeleteResult(";
  out << "exitCode=" << to_string(exitCode);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


FeedResult::~FeedResult() throw() {
}


void FeedResult::__set_exitCode(const int32_t val) {
  this->exitCode = val;
}

void FeedResult::__set_message(const std::string& val) {
  this->message = val;
}

void FeedResult::__set_result(const NewsFeed& val) {
  this->result = val;
}

uint32_t FeedResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exitCode);
          this->__isset.exitCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result.read(iprot);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FeedResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FeedResult");

  xfer += oprot->writeFieldBegin("exitCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->exitCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->result.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FeedResult &a, FeedResult &b) {
  using ::std::swap;
  swap(a.exitCode, b.exitCode);
  swap(a.message, b.message);
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

FeedResult::FeedResult(const FeedResult& other22) {
  exitCode = other22.exitCode;
  message = other22.message;
  result = other22.result;
  __isset = other22.__isset;
}
FeedResult& FeedResult::operator=(const FeedResult& other23) {
  exitCode = other23.exitCode;
  message = other23.message;
  result = other23.result;
  __isset = other23.__isset;
  return *this;
}
void FeedResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FeedResult(";
  out << "exitCode=" << to_string(exitCode);
  out << ", " << "message=" << to_string(message);
  out << ", " << "result=" << to_string(result);
  out << ")";
}


Item::~Item() throw() {
}


void Item::__set_post(const int32_t val) {
  this->post = val;
}

void Item::__set_id(const int32_t val) {
  this->id = val;
}

uint32_t Item::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->post);
          this->__isset.post = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Item::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Item");

  xfer += oprot->writeFieldBegin("post", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->post);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Item &a, Item &b) {
  using ::std::swap;
  swap(a.post, b.post);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

Item::Item(const Item& other24) {
  post = other24.post;
  id = other24.id;
  __isset = other24.__isset;
}
Item& Item::operator=(const Item& other25) {
  post = other25.post;
  id = other25.id;
  __isset = other25.__isset;
  return *this;
}
void Item::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Item(";
  out << "post=" << to_string(post);
  out << ", " << "id=" << to_string(id);
  out << ")";
}


FeedCountResult::~FeedCountResult() throw() {
}


void FeedCountResult::__set_exitCode(const int32_t val) {
  this->exitCode = val;
}

void FeedCountResult::__set_message(const std::string& val) {
  this->message = val;
}

void FeedCountResult::__set_result(const Item& val) {
  this->result = val;
}

uint32_t FeedCountResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exitCode);
          this->__isset.exitCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result.read(iprot);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FeedCountResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FeedCountResult");

  xfer += oprot->writeFieldBegin("exitCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->exitCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->result.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FeedCountResult &a, FeedCountResult &b) {
  using ::std::swap;
  swap(a.exitCode, b.exitCode);
  swap(a.message, b.message);
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

FeedCountResult::FeedCountResult(const FeedCountResult& other26) {
  exitCode = other26.exitCode;
  message = other26.message;
  result = other26.result;
  __isset = other26.__isset;
}
FeedCountResult& FeedCountResult::operator=(const FeedCountResult& other27) {
  exitCode = other27.exitCode;
  message = other27.message;
  result = other27.result;
  __isset = other27.__isset;
  return *this;
}
void FeedCountResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FeedCountResult(";
  out << "exitCode=" << to_string(exitCode);
  out << ", " << "message=" << to_string(message);
  out << ", " << "result=" << to_string(result);
  out << ")";
}


ListFeed::~ListFeed() throw() {
}


void ListFeed::__set_count(const int32_t val) {
  this->count = val;
}

void ListFeed::__set_feedlist(const std::vector<NewsFeed> & val) {
  this->feedlist = val;
}

void ListFeed::__set_nex(const Item& val) {
  this->nex = val;
}

uint32_t ListFeed::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->feedlist.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->feedlist.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += this->feedlist[_i32].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.feedlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->nex.read(iprot);
          this->__isset.nex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListFeed::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListFeed");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("feedlist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->feedlist.size()));
    std::vector<NewsFeed> ::const_iterator _iter33;
    for (_iter33 = this->feedlist.begin(); _iter33 != this->feedlist.end(); ++_iter33)
    {
      xfer += (*_iter33).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nex", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->nex.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListFeed &a, ListFeed &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.feedlist, b.feedlist);
  swap(a.nex, b.nex);
  swap(a.__isset, b.__isset);
}

ListFeed::ListFeed(const ListFeed& other34) {
  count = other34.count;
  feedlist = other34.feedlist;
  nex = other34.nex;
  __isset = other34.__isset;
}
ListFeed& ListFeed::operator=(const ListFeed& other35) {
  count = other35.count;
  feedlist = other35.feedlist;
  nex = other35.nex;
  __isset = other35.__isset;
  return *this;
}
void ListFeed::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListFeed(";
  out << "count=" << to_string(count);
  out << ", " << "feedlist=" << to_string(feedlist);
  out << ", " << "nex=" << to_string(nex);
  out << ")";
}


ListFeedResult::~ListFeedResult() throw() {
}


void ListFeedResult::__set_exitCode(const int32_t val) {
  this->exitCode = val;
}

void ListFeedResult::__set_message(const std::string& val) {
  this->message = val;
}

void ListFeedResult::__set_result(const ListFeed& val) {
  this->result = val;
}

uint32_t ListFeedResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exitCode);
          this->__isset.exitCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result.read(iprot);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListFeedResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListFeedResult");

  xfer += oprot->writeFieldBegin("exitCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->exitCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->result.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListFeedResult &a, ListFeedResult &b) {
  using ::std::swap;
  swap(a.exitCode, b.exitCode);
  swap(a.message, b.message);
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

ListFeedResult::ListFeedResult(const ListFeedResult& other36) {
  exitCode = other36.exitCode;
  message = other36.message;
  result = other36.result;
  __isset = other36.__isset;
}
ListFeedResult& ListFeedResult::operator=(const ListFeedResult& other37) {
  exitCode = other37.exitCode;
  message = other37.message;
  result = other37.result;
  __isset = other37.__isset;
  return *this;
}
void ListFeedResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListFeedResult(";
  out << "exitCode=" << to_string(exitCode);
  out << ", " << "message=" << to_string(message);
  out << ", " << "result=" << to_string(result);
  out << ")";
}


